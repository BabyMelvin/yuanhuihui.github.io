---
layout: post
title:  "ContentProvider"
date:   2015-05-31 20:30:00
catalog:  true
tags:
    - android
    - 组件
---


## 一、概述


ContentResolver和ContentProvider

使用方法归纳：
1、从当前Activity获取系统的ContentResolver；
2、使用ContentProvider的insert、delete、update、query方法对ContentProvider的内容进行增删改查；
3、如果是使用query是的到一个Cursor的结果集，通过该结果集可以获得我们查询的结果。


    ContentResolver cr = getContentResolver();  //获取ContentResolver
    Cursor cursor = cr.query(ContactsContract.Contacts.CONTENT_URI, null,
    null, null, null);   //查询系统的联系人信息

    ListAdapter la = newSimpleCursorAdapter(MainActivity.this,
    android.R.layout.simple_list_item_1, cursor,
    newString[] {ContactsContract.Contacts.DISPLAY_NAME_PRIMARY },
    newint[] { android.R.id.text1 });   //建立列表适配器，把cursor关联进来

    contactsList.setAdapter(la);        //把ListVIew与适配器绑定
    setContentView(contactsList);       //动态生成ListView


Uri:

content://com.gityuan.articles/android/3

- schema = content://
- authority = com.gityuan.articles
- path = /android/3

## 二、流程分析

### 2.1 getContentResolver

Context中调用getContentResolver，经过层层调用(过程省略)，最后调用到ContextImpl类。

[-> ContextImpl.java]

    class ContextImpl extends Context {
        public ContentResolver getContentResolver() {
            return mContentResolver;
        }
    }

该方法获取的`mContentResolver`赋值操作是在`ContextImpl`对象实例化过程完成的：

    mContentResolver= new ApplicationContentResolver(this, mainThread, user);

mContentResolver的真实类型为`ApplicationContentResolver`;该类继承于ContentResolver，位于ContextImpl的内部类。获取到ContentResolver(简称CR)。再来看看
query操作.

### 2.2 CR.query

[-> ContentResolver.java]

    public final  Cursor query( Uri uri,  String[] projection,
             String selection,  String[] selectionArgs,
             String sortOrder) {
        return query(uri, projection, selection, selectionArgs, sortOrder, null);
    }

    public final  Cursor query(final  Uri uri,  String[] projection,
                 String selection,  String[] selectionArgs,
                 String sortOrder,  CancellationSignal cancellationSignal) {
            android.util.SeempLog.record_uri(13, uri);
            Preconditions.checkNotNull(uri, "uri");
            //获取unstable provider【见小节2.3】
            IContentProvider unstableProvider = acquireUnstableProvider(uri);
            if (unstableProvider == null) {
                return null;
            }
            IContentProvider stableProvider = null;
            Cursor qCursor = null;
            try {
                long startTime = SystemClock.uptimeMillis();

                ICancellationSignal remoteCancellationSignal = null;
                //设置可取消的操作【见小节】
                if (cancellationSignal != null) {
                    cancellationSignal.throwIfCanceled();
                    remoteCancellationSignal = unstableProvider.createCancellationSignal();
                    cancellationSignal.setRemote(remoteCancellationSignal);
                }
                try {
                    //执行查询操作【见小节】
                    qCursor = unstableProvider.query(mPackageName, uri, projection,
                            selection, selectionArgs, sortOrder, remoteCancellationSignal);
                } catch (DeadObjectException e) {
                    // 远程进程死亡，处理unstable provider死亡过程【见小节】
                    unstableProviderDied(unstableProvider);
                    //unstable类型死亡后，再创建stable类型的provider【见小节】
                    stableProvider = acquireProvider(uri);
                    if (stableProvider == null) {
                        return null;
                    //再次执行查询操作
                    qCursor = stableProvider.query(mPackageName, uri, projection,
                            selection, selectionArgs, sortOrder, remoteCancellationSignal);

                }
                if (qCursor == null) {
                    return null;
                }

                //强制执行查询操作，可能会失败并跑出RuntimeException
                qCursor.getCount();
                //【见小节】
                CursorWrapperInner wrapper = new CursorWrapperInner(qCursor,
                        stableProvider != null ? stableProvider : acquireProvider(uri));
                stableProvider = null;
                qCursor = null;
                return wrapper;
            } catch (RemoteException e) {
                return null;
            } finally {
                if (qCursor != null) {
                    qCursor.close();
                }
                if (cancellationSignal != null) {
                    cancellationSignal.setRemote(null);
                }
                if (unstableProvider != null) {
                    releaseUnstableProvider(unstableProvider);
                }
                if (stableProvider != null) {
                    releaseProvider(stableProvider);
                }
            }
        }

该方法要展开的点比较多，接下来依依展开说明：

- acquireUnstableProvider(uri)
- cancellationSignal()
- unstableProvider.query()
- unstableProviderDied(unstableProvider)
- acquireProvider()
- stableProvider.query
- qCursor.getCount()
- new CursorWrapperInner()


###  2.3 CR.acquireUnstableProvider
[-> ContentResolver.java]

    public final IContentProvider acquireUnstableProvider(Uri uri) {
        //此处SCHEME_CONTENT = "content"
        if (!SCHEME_CONTENT.equals(uri.getScheme())) {
            return null;
        }
        String auth = uri.getAuthority();
        if (auth != null) {
            //【见小节2.3.1】
            return acquireUnstableProvider(mContext, uri.getAuthority());
        }
        return null;
    }

#### 2.3.1 ACR.acquireUnstableProvider
[-> ContextImpl.java]

    class ContextImpl extends Context {
        private static final class ApplicationContentResolver extends ContentResolver {
            ...
            protected IContentProvider acquireUnstableProvider(Context c, String auth) {
                //【见小节2.3.2】
                return mMainThread.acquireProvider(c,
                        ContentProvider.getAuthorityWithoutUserId(auth),
                        resolveUserIdFromAuthority(auth), false);
            }
        }
    }

getAuthorityWithoutUserId()的过程是字符截断过程，即去掉auth中的UserId信息，比如`com.gityuan.articles@123`，经过该方法处理后就变成了`com.gityuan.articles`。

#### 2.3.2 AT.acquireProvider
[-> ActivityThread.java]

    public final IContentProvider acquireProvider(
            Context c, String auth, int userId, boolean stable) {
        //【见小节2.3.3】
        final IContentProvider provider = acquireExistingProvider(c, auth, userId, stable);
        if (provider != null) {
            //成功获取已经存在的ContentProvider对象，则直接返回
            return provider;
        }

        IActivityManager.ContentProviderHolder holder = null;
        try {
            //【见小节2.3.4】
            holder = ActivityManagerNative.getDefault().getContentProvider(
                    getApplicationThread(), auth, userId, stable);
        } catch (RemoteException ex) {
        }
        if (holder == null) {
            //无法获取auth所对应的provider则直接返回
            return null;
        }

        //安装provider将会增加引用计数【见小节2.3.5】
        holder = installProvider(c, holder, holder.info,
                true , holder.noReleaseNeeded, stable);
        return holder.provider;
    }

该方法的主要功能：

- 首先，尝试获取已存储的provider，当成功获取则直接返回，否则继续执行；
- 通过AMS来获取provider，当无法获取auth所对应的provider则直接返回，否则继续执行；
- 采用installProvider安装provider，并该provider的增加引用计数。

#### 2.3.3 AT.acquireExistingProvider
[-> ActivityThread.java]

    public final IContentProvider acquireExistingProvider(
            Context c, String auth, int userId, boolean stable) {
        synchronized (mProviderMap) {
            final ProviderKey key = new ProviderKey(auth, userId);
            //从mProviderMap查询是否存在相对应的provider
            final ProviderClientRecord pr = mProviderMap.get(key);
            if (pr == null) {
                return null;
            }

            IContentProvider provider = pr.mProvider;
            IBinder jBinder = provider.asBinder();
            if (!jBinder.isBinderAlive()) {
                //当provider所在进程已经死亡则返回【】
                handleUnstableProviderDiedLocked(jBinder, true);
                return null;
            }

            ProviderRefCount prc = mProviderRefCountMap.get(jBinder);
            if (prc != null) {
                //增加引用计数【】
                incProviderRefLocked(prc, stable);
            }
            return provider;
        }
    }

- 首先从`mProviderMap`查询是否存在相对应的provider，若不存在则直接返回，否则继续执行；
- 当provider所在进程已经死亡，则回调死亡处理方法后返回，否则继续执行；
- 当provider已经存在引用计数，则继续增加引用计数，否则不增加。

##### `handleUnstableProviderDiedLocked`
##### `incProviderRefLocked`

#### 2.3.4 AMS.getContentProvider

ActivityManagerNative.getDefault()返回的是AMP，AMP经过binder IPC通信传递给AMS来完成相应工作，关于这个调用过程前面的文章已经讲过多次这里就不再介绍了。

[-> ActivityManagerService.java]

    public final ContentProviderHolder getContentProvider(
            IApplicationThread caller, String name, int userId, boolean stable) {
        if (caller == null) {
            throw new SecurityException();
        }
        return getContentProviderImpl(caller, name, null, stable, userId);
    }

#### 2.3.5 AMS.getContentProviderImpl




### 调用链

ContentResolver.query
    ContentResolver.acquireUnstableProvider
        ApplicationContentResolver.acquireUnstableProvider
            ActivityThread.acquireProvider
                AT.acquireExistingProvider, return.
                AMP.getContentProvider
                    AMS.getContentProvider
                        AMS.getContentProviderImpl
                            AMS.incProviderCountLocked  (建立binder死亡通知)
                            startProcessLocked
                            cpr.wait();
                AT.installProvider
                    newInstance
                    ContentProvider.this.onCreate();
     ContentProviderProxy.query
        ContentProviderNative.query
            ContentProvider.Transport.query
                ContentProvider.query
                    真正子类的query方法

     new CursorWrapperInner, return


#### 对于unstable则不会杀掉client端进程

     public final Cursor query(final @NonNull Uri uri, @Nullable String[] projection,
        @Nullable String selection, @Nullable String[] selectionArgs,
        @Nullable String sortOrder, @Nullable CancellationSignal cancellationSignal) {

    IContentProvider unstableProvider = acquireUnstableProvider(uri);
    if (unstableProvider == null) {
        return null;
    }
    IContentProvider stableProvider = null;
    Cursor qCursor = null;
    try {
        long startTime = SystemClock.uptimeMillis();
        ICancellationSignal remoteCancellationSignal = null;
        if (cancellationSignal != null) {
            cancellationSignal.throwIfCanceled();
            remoteCancellationSignal = unstableProvider.createCancellationSignal();
            cancellationSignal.setRemote(remoteCancellationSignal);
        }
        try {
            qCursor = unstableProvider.query(mPackageName, uri, projection,
                    selection, selectionArgs, sortOrder, remoteCancellationSignal);
        } catch (DeadObjectException e) {
            // The remote process has died...  but we only hold an unstable
            // reference though, so we might recover!!!  Let's try!!!!
            // This is exciting!!1!!1!!!!1
            unstableProviderDied(unstableProvider);
            stableProvider = acquireProvider(uri);
            if (stableProvider == null) {
                return null;
            }
            qCursor = stableProvider.query(mPackageName, uri, projection,
                    selection, selectionArgs, sortOrder, remoteCancellationSignal);
        }
        if (qCursor == null) {
            return null;
        }

        // Force query execution.  Might fail and throw a runtime exception here.
        qCursor.getCount();
        long durationMillis = SystemClock.uptimeMillis() - startTime;
        maybeLogQueryToEventLog(durationMillis, uri, projection, selection, sortOrder);

        // Wrap the cursor object into CursorWrapperInner object.
        CursorWrapperInner wrapper = new CursorWrapperInner(qCursor,
                stableProvider != null ? stableProvider : acquireProvider(uri));
        stableProvider = null;
        qCursor = null;
        return wrapper;

## CP进程启动过程

    ams.attachApplicationLocked
        ApplicationThread.bindApplication
            AT.handleBindApplication
                AT.handleBindApplication
                    AMP.publishContentProviders
                        AMS.publishContentProviders

publish方法中：  dst.notifyAll();


## 三、资源释放

### 3.1 releaseProvider

CASE 1: releaseProvider

    ContextImpl.ApplicationContentResolver.releaseProvider
        AT.releaseProvider (true)
            AMP.refContentProvider
                AMS.refContentProvider

            AT.completeRemoveProvider
                AMP.removeContentProvider
                    AMS.removeContentProvider
                        AMS.decProviderCountLocked

CASE 2: releaseUnstableProvider

    ContextImpl.ApplicationContentResolver.releaseUnstableProvider
        AT.releaseProvider (false)
            AMP.refContentProvider
                AMS.refContentProvider

            AT.completeRemoveProvider
                AMP.removeContentProvider
                    AMS.removeContentProvider
                        AMS.decProviderCountLocked


###  3.2 CR.unstableProviderDied

CR.unstableProviderDied
    ACR.CR.unstableProviderDied
        AT.handleUnstableProviderDied
            AT.handleUnstableProviderDiedLocked
                AMP.unstableProviderDied
                    AMS.unstableProviderDied
                        AMS.appDiedLocked
                            AMS.appDiedLocked


#### AT.handleUnstableProviderDiedLocked
[-> ActivityThread.java]

    final void handleUnstableProviderDiedLocked(IBinder provider, boolean fromClient) {
        ProviderRefCount prc = mProviderRefCountMap.get(provider);
        if (prc != null) {
            //将provider信息从mProviderRefCountMap和mProviderMap中移除
            mProviderRefCountMap.remove(provider);
            for (int i=mProviderMap.size()-1; i>=0; i--) {
                ProviderClientRecord pr = mProviderMap.valueAt(i);
                if (pr != null && pr.mProvider.asBinder() == provider) {
                    mProviderMap.removeAt(i);
                }
            }

            if (fromClient) {
                try {
                    //【】
                    ActivityManagerNative.getDefault().unstableProviderDied(
                            prc.holder.connection);
                } catch (RemoteException e) {

                }
            }
        }
    }

#### AMS.unstableProviderDied

    public void unstableProviderDied(IBinder connection) {
        ContentProviderConnection conn;
        try {
            conn = (ContentProviderConnection)connection;
        } catch (ClassCastException e) {
            throw new IllegalArgumentException(msg);
        }
        if (conn == null) {
            throw new NullPointerException("connection is null");
        }

        //从conn对象中获取ContentProviderRecord变量的IContentProvider
        synchronized (this) {
            provider = conn.provider.provider;
        }

        if (provider == null) {
            return;
        }

        if (provider.asBinder().pingBinder()) {
            //caller回调告知该provider死亡，但事实上能够ping通，说明还存活则直接返回；
            synchronized (this) {
                return;
            }
        }

        //这里进入死亡处理流程
        synchronized (this) {
            if (conn.provider.provider != provider) {
                //IContentProvider对象已改变，则无需清理直接返回；
                return;
            }

            ProcessRecord proc = conn.provider.proc;
            if (proc == null || proc.thread == null) {
                //进程已完成清理，则直接返回；
                return;
            }

            //这才到真正的死亡处理过程，但provider死得有点过早
            final long ident = Binder.clearCallingIdentity();
            try {
                //【】
                appDiedLocked(proc);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        }
    }

#### AMS.appDiedLocked








### 3.3 Cursor.close

调用链

    CR.CursorWrapperInner.close
        CW.close
        CR.releaseProvider


#### 3.3.1 CursorWrapperInner.close
[-> ContentResolver.java]

    @Override
    public void close() {
        //【见小节3.3.2】
        super.close();
        ContentResolver.this.releaseProvider(mContentProvider);
        mProviderReleased = true;

        if (mCloseGuard != null) {
            mCloseGuard.close();
        }
    }


#### 3.3.2 CursorWrapper.close
[-> CursorWrapper.java]

    public void close() {
        //mCursor数据类型为BulkCursorToCursorAdaptor【见小节3.3.3】
        mCursor.close();
    }

#### 3.3.3 BCTCA.close
[-> BulkCursorToCursorAdaptor.java]

    public void close() {
        //释放内存CursorWindow【见小节3.3.4】
        super.close();

        if (mBulkCursor != null) {
            try {
                mBulkCursor.close(); //【】释放远程对象
            } catch (RemoteException ex) {
                ...
            } finally {
                mBulkCursor = null;
            }
        }
    }

#### 3.3.4 AbstractCursor.close
[-> AbstractCursor.java]

    public void close() {
        mClosed = true;
        //移除所有已经注册的Observable
        mContentObservable.unregisterAll();
        //【见小节3.3.5】
        onDeactivateOrClose();
    }


#### 3.3.5 AbstractWindowedCursor.close
[-> AbstractWindowedCursor.java]

    protected void onDeactivateOrClose() {
        //【见小节3.3.6】
        super.onDeactivateOrClose();
        closeWindow();
    }

#### 3.3.6 AbstractCursor
[-> AbstractCursor.java]

    protected void onDeactivateOrClose() {
        if (mSelfObserver != null) {
            mContentResolver.unregisterContentObserver(mSelfObserver);
            mSelfObserverRegistered = false;
        }
        mDataSetObservable.notifyInvalidated();
    }


#### 3.3.7 AbstractWindowedCursor.closeWindow
[-> AbstractWindowedCursor.java]

    protected void closeWindow() {
        if (mWindow != null) {
            mWindow.close();
            mWindow = null;
        }
    }


### 小节

如客户端不显示调用close，将导致服务端进程的资源无法释放

    一旦CP进程死亡，AMS能根据该ContentProviderRecorder中保存的客户端信息找到使用该CP的所有客户端进程，然后再杀死它们。
  客户端能否撤销这种紧密关系呢？答案是肯定的，但这和Cursor是否关闭有关。这里先简单描述一下流程：
  ·  当Cursor关闭时，ContextImpl的releaseProvider会被调用。根据前面的介绍，它最终会调用ActivityThread的releaseProvider函数。
  ·  ActivityThread的releaseProvider函数会导致completeRemoveProvider被调用，在其内部根据该CP的引用计数判断是否需要调用AMS的removeContentProvider。
  ·  通过AMS的removeContentProvider将删除对应ContentProviderRecord中此客户端进程的信息，这样一来，客户端进程和目标CP进程的紧密关系就荡然无存了。



### 总结

在获取contentprovider时,优先获取unstableProvider,再尝试获取stableProvider

- unstableProvider并不会直接杀掉contentprovider所在进程.
- stableProvider 会直接杀死进程.

电话获取的确是stableProvider类型,应该考虑让其获取unstable的provider.

AMS.removeDyingProviderLocked

    if (conn.stableCount > 0) {
        if (!capp.persistent && capp.thread != null
                && capp.pid != 0
                && capp.pid != MY_PID) {
            capp.kill("depends on provider "
                    + cpr.name.flattenToShortString()
                    + " in dying proc " + (proc != null ? proc.processName : "??"), true);
        }
    } else if (capp.thread != null && conn.provider.provider != null) {
        try {
            capp.thread.unstableProviderDied(conn.provider.provider.asBinder());
        } catch (RemoteException e) {
        }
        // In the protocol here, we don't expect the client to correctly
        // clean up this connection, we'll just remove it.
        cpr.connections.remove(i);
        if (conn.client.conProviders.remove(conn)) {
            stopAssociationLocked(capp.uid, capp.processName, cpr.uid, cpr.name);
        }
    }


### YellowPageProvider

* ContentProviderRecord{b42c07f u0 com.miui.yellowpage/.providers.yellowpage.YellowPageProvider}
  package=com.miui.yellowpage process=com.miui.yellowpage
  proc=ProcessRecord{f57e52 15266:com.miui.yellowpage/u0a5}
  launchingApp=ProcessRecord{f57e52 15266:com.miui.yellowpage/u0a5}
  uid=10005 provider=android.content.ContentProviderProxy@34cd84c
  authority=miui.yellowpage
  isSyncable=true multiprocess=false initOrder=0
  Connections:
    -> 15552:com.android.contacts/u0a5 s1/4 u0/31 +4s362ms


### 参考

http://cthhqu.blog.51cto.com/7598297/1281217


### backup


acquireUnstableProvider(uri);

cancellationSignal

unstableProvider.query

unstableProviderDied(unstableProvider)

acquireProvider

stableProvider.query

qCursor.getCount();

new CursorWrapperInner




ContentResolver.query
    ContentResolver.acquireUnstableProvider
        ApplicationContentResolver.acquireUnstableProvider
            ActivityThread.acquireProvider
                AT.acquireExistingProvider, return.
                AMP.getContentProvider
                    AMS.getContentProvider
                        AMS.getContentProviderImpl
                            AMS.incProviderCountLocked  (建立binder死亡通知)
                            startProcessLocked
                            cpr.wait();
                AT.installProvider
                    newInstance
                    ContentProvider.this.onCreate();
     ContentProviderProxy.query
        ContentProviderNative.query
            ContentProvider.Transport.query
                ContentProvider.query
                    真正子类的query方法

     new CursorWrapperInner, return


     content://com.gityuan.articles/android/3


     //记录所有的provider信息
    final ArrayMap<ProviderKey, ProviderClientRecord> mProviderMap
        = new ArrayMap<ProviderKey, ProviderClientRecord>();

    //记录每个provider的引用次数
    final ArrayMap<IBinder, ProviderRefCount> mProviderRefCountMap
        = new ArrayMap<IBinder, ProviderRefCount>();
    final ArrayMap<IBinder, ProviderClientRecord> mLocalProviders
        = new ArrayMap<IBinder, ProviderClientRecord>();
    final ArrayMap<ComponentName, ProviderClientRecord> mLocalProvidersByName
            = new ArrayMap<ComponentName, ProviderClientRecord>();
            
