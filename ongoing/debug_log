
### 1. process
Start proc
Killing
Force stopping
am_proc_start [Event]
am_kill [Event]


### 2. activity
ActivityManager: START u0


### 3. service
am_create_service [Event]
am_destroy_service [Event]


### 4. broadcast


### 5. provider

force acquire UnstableProvider for pkg
is crashing; detaching


Failed to find provider info
cann't getContentProviderImpl
Unable to launch app
No package info for content provider

resolve content provider:

//应该是新加的log
acquire killed Provider
Existing provider
force acquire UnstableProvider

### 6. binder
starved for
system_server maxThreads
binder_sample [Event]


### 7. 开机启动过程
Zygote  :
SystemServer:

#### 7.1 init

init: init started!
init: init second stage started!  [kernel log]
init: Starting service 'logd'...  [各种服务]

#### 7.2 system_server
Entered the Android system server
Starting phase
Entered the Android system server main thread loop


### 8. stablity
FATAL EXCEPTION IN SYSTEM PROCESS
WATCHDOG KILLING SYSTEM PROCESS
ANR in
am_crash [Event]
watchdog: [Event]

### 9. 休眠与唤醒
PowerManagerService: Going to sleep
PowerManagerService: Waking up from sleep


### 10. key event
 keyCode:

### input

Window '%s' spent %0.1fms processing the last input event: 耗时超过2s的log

### 11. phone
up time:
ro.product.mod_device
ro.product.model

### 12. fork进程
System server process
System server process %d has been created
System server process %d has died. Restarting Zygote


### 13. lock

dvm_lock_sample

dvm_lock_sample: [system_server,1,Binder:2755_8,612,ActivityManagerService.java,16670,-,16423,61]

Binder:2755_8线程位于16670行代码612ms,等待AMS.java的16423行代码持有锁

process, main, thread, time,   file, line, ownerfile,ownerline,  sample_percent

格式定义在system/core/logcat/event.logtags
20003 dvm_lock_sample (process|3),(main|1|5),(thread|3),(time|1|3),(file|3),(line|1|5),(ownerfile|3),(ownerline|1|5),(sample_percent|1|6)
从中可以看出,dvm_lock_sample的几个参数包括:
process:进程名
main:是否是敏感线程(被设置了strictmode policy的线程),取值0或1
thread:线程名
time:等待锁的时间,毫秒为单位
file:请求的lock在哪个文件
line:请求的锁在代码哪一行
ownerfile:这个锁被哪个文件占用
ownerline:这个锁被占用的行数
sample_percent:以500ms为准,如果等待时间为250ms,那么这个值为50,表示50%

### 14. 卡顿情况

//输出当前掉帧个数
android.util.EventLog.writeEvent(30089,skippedFrames);

Eventlog: 30089. (这个也是主线程的情况)

30099, 是状态栏的问题.

## 其他

调试技巧:

输出不包含的log:
logcat -b events | egrep -v "am_pss|sysui_|am_broadcast"
logcat -b system -b  main -b events | egrep "Timeline|am_" | egrep  -v "am_pss|auditd"



### monkey命令
http://wiki.n.miui.com/pages/viewpage.action?pageId=30213506
adb shell monkey -v --throttle 300 --pct-touch 30 --pct-motion 20 --pct-nav 20 --pct-majornav 15 --pct-appswitch 5 --pct-anyevent 5 --pct-trackball 0 --pct-syskeys 0 --bugreport 10000000  > E:\monkeytext

### provider问题


https://android-review.googlesource.com/#/c/144191/
https://android-review.googlesource.com/#/c/148199/


### MIUI Event log

30099, 是状态栏的问题.
30089, 这是主线程skippedFrames个数

cpu:  格式total, user,system, iowait, irq, softirq

sf_frame_dur: 当前帧结束才输出的信息. 是由EventLog::doLogFrameDurations()输出的,  含义 (window|3),(dur0|1),(dur1|1),(dur2|1),(dur3|1),(dur4|1),(dur5|1),(dur6|1)

screen_toggled (screen_state|1|5) : 含义:0 for screen off, 1 for screen on, 2 for key-guard done

am_pss:  格式 pid, uid, process name, pssKb, ussKb. (uss是进程独占物理内存, pss包含共享库的比例. 两者差值在于共享库的比例大小)

power_sleep_requested: 用户按下power键

notification_enqueue: 进入通知队列. 格式 uid, pid, pkg, id, tag, userid, notification, status
例如:notification_enqueue: [1000,3184,com.miui.securitycenter,2131296947,NULL,0,
    Notification(pri=0 contentView=null vibrate=null sound=null defaults=0x0 flags=0x20 color=0x00000000 vis=PRIVATE),1]

以下都是位于MetricsLogger.java文件调用:(记录一些指标的log)
SYSUI_VIEW_VISIBILITY:  (category|1|5),(visible|1|6)
SYSUI_ACTION:  (category|1|5),(pkg|3). 例如 sysui_action: [323,com.miui.home/.launcher.Launcher]
SYSUI_COUNT:  (name|3),(increment|1). 例如 sysui_count: [DevelopmentSettings/adb_install|true,1]
SYSUI_HISTOGRAM:  (name|3),(bucket|1). 例如 sysui_histogram: [screen_timeout,2147483]


 wm_task_moved: 格式 (TaskId|1|5),(ToTop|1),(Index|1)
